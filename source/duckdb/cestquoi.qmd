# DuckDB, c'est quoi ? ü¶Ü

[DuckDB](https://duckdb.org/) se pr√©sente comme un SGBD (syst√®me de gestion de base de donn√©es) **in-process**, **analytical**, **rapide**, **open-source**, **portable**.  
Voyons ce que √ßa veut dire dans le d√©tail

## In-process  

C'est l'un des points principaux de DuckDB : **tout tourne au sein d'un m√™me processus**.  
C'est donc diff√©rent des SGBD classiques qui ont des architectures client / serveur.  
Dans un SGBD classique comme postgres, on peut distinguer 3 grands morceaux d'architecture :  

* Le client : il envoie les requ√™tes au serveur et r√©cup√®re les r√©sultats  
* Le serveur : tourne en permanence, re√ßoit les requ√™tes, les analyse, d√©termine et ex√©cute le plan d'ex√©cution correspondant  
* Le stockage physique des donn√©es : en g√©n√©ral le syst√®me de fichiers local au serveur postgres  

Dans le cas de DuckDB, le client et le serveur sont confondus dans le m√™me processus et ce processus ne tourne que pour la dur√©e de la session DuckDB.  
Le stockage de donn√©es est d√©coupl√© de DuckDB. DuckDB travaille par d√©faut `in-memory` et s'appuie sur des sources de donn√©es externes (par exemple sur S3, wink-wink) 

En r√©sum√© :  

* Architecture classique (type postgres) : client => serveur / stockage des donn√©es  
* Architecture Duckdb : client / serveur => sources multiples de donn√©es

## Analytical

DuckDB est une base de donn√©es sp√©cialis√©e dans les traitements analytiques, par opposition aux bases de donn√©es habituelles sp√©cialis√©es dans le transactionnel.  
Cette diff√©rence de paradigme se voit principalement √† 2 niveaux :  

* Au lieu de travailler sur des donn√©es pr√©-structur√©es (coucou les formes normales), on va travailler directement sur les **donn√©es brutes** (.csv, .parquet)
* On va se concentrer sur les lectures (analyse de la donn√©es) et pas sur les modifications unitaires (transactionnelles). Ca rejoint le pattern `write once, read many` vu pr√©c√©demment sur S3

## Rapide  

Bon, tous les SGBD disent √ßa, vous v√©rifierez par vous-m√™me :) 

## Portable

DuckDB se d√©cline dans √† peu pr√®s toutes les formes et langages possibles et est multi-plateforme. Dans la suite on va s'int√©resser √† sa version en ligne de commande mais il est aussi utilisable directement dans vos codes R, python, Java (sous forme de driver JDBC) et m√™me en version web via webassembly !  

## Interop√©rable  

DuckDB est capable de lire et de s'interfacer avec de multiples sources de donn√©es (`.csv`, `.parquet` ...), diff√©rents protocoles (`http` brut, `S3`, base de donn√©es ...) et est presque enti√®rement compatible avec le dialecte PostgreSQL (cf [Postgresql compatibility](https://duckdb.org/docs/stable/sql/dialect/postgresql_compatibility.html) )  