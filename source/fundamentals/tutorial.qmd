::: {.content-visible when-profile="fr"}
# S3 Les Fondamentaux 

## S3 : Une API HTTP

S3 est une API REST HTTP. Des requ√™tes HTTP sont utilis√©es pour obtenir, ajouter, envoyer et supprimer des donn√©es. 
Afin de communiquer avec l'api nous devrons donc disposer de son URL. 

Par exemple: 
- AWS S3 : http://s3.amazonaws.com/  - qui est tr√®s souvent configur√© par d√©faut, autant pour les librairies que pour les clients. 
- SSP CLOUD : https://minio.lab.sspcloud.fr
- LS3 : minio.datascience.kube.insee.fr
- pour un usage interne : minio.dev.kube.insee.fr
...

### Authentification

Ces APIs √©tant g√©n√©ralement s√©curis√©es, il faudra des informations d'authentification (credentials) pour communiquer avec l'API afin qu'elle sache qui vous √™tes et ce qu'il vous est permis de faire. Ainsi, nous disposeront d'une *access key*, d'une *secret key* ainsi que d'un jeton de session ou *token* utilis√© dans le cadre d‚Äôune authentification temporaire.

Pourront √™tre utilis√©es les variables d'environnements suivantes: elles sont g√©n√©ralement reconnus par les librairies

AWS_ACCESS_KEY_ID=my_access_key
AWS_SECRET_ACCESS_KEY=my_secret_key
AWS_SESSION_TOKEN = my_session_token
ENDPOINT_URL = s3_endpoint

Pour r√©cup√©rer vos credentials, vous pouvez vous rendre sur 
- LS3 / SSPCLOUD : onglet my account > Connect to storage et s√©lectionner `shell environment variable`

## Un client pour communiquer avec S3

Afin de simplifier les int√©ractions avec l'API S3, nous allons utiliser un client s3. Cela permettra de g√©rer l'authentification de mani√®re automatique. Il nous permettra √©galement d'automatiser des transferts de fichiers, de naviguer facilement dans les buckets en ligne de commande.

Des exemples de clients s3:
- mc (Minio Client) : compatible pour tout service compatible s3
- s3cmd
- aws cli : outil officiel pour int√©ragir avec Amazon S3

Pour configurer mc : une variable d'environnement suffit : MC_HOST_ALIAS = "https://<Access Key>:<Secret Key>:<Session Token>@<YOUR-S3-ENDPOINT>"
exemple:
```
export MC_HOST_s3 = "https://$AWS_ACCESS_KEY_ID$:AWS_SECRET_ACCESS_KEY:AWS_SESSION_TOKEN@$ENDPOINT_URL$"
```

Une fois le tout configur√©, nous pouvons lister le contenu de notre bucket
```
mc ls s3/my-bucket
```
copier un fichier
```
mc cp s3/my-bucket/my-file.txt s3/my-bucket/somewhere-else/my-file.txt
```
le t√©l√©charger
```
mc get s3/my-bucket/my-file.txt ./data/my-file.txt
```
le supprimer
```
mc rm s3/my-bucket/my-file.txt
```
le t√©l√©verser
```
mc put ./data/my-file.txt s3/my-bucket/my-second-file.txt
```

D√©finir un lien d'acc√®s √† un fichier

La commande `mc share download` g√©n√®re une URL pr√©-sign√©e contenant les identifiants d'acc√®s int√©gr√©s, permettant de t√©l√©charger des objets depuis un bucket.

```
mc share download --expire DURATION ALIAS/PATH
```

## Service account

Au del√† de votre compte personnel, vous avez la possibilit√© de cr√©er un compte de service ou *service account*. A la diff√©rence de votre compte personnel, les credentials du service account seront permanents. Vous ne disposerez donc pas d'un session token, seulement d'une access key et secret key. Les services account sont g√©n√©ralement utilis√©s par des applications ou scripts pour acc√©der aux ressources s3.

Pour cr√©er un  compte de service, c'est √† dire une paire *access-key* *secret-key* : 

```
mc admin accesskey create        \
   s3/ myuser               \
   --access-key myuseraccesskey  \
   --secret-key myusersecretkey  \
```
NB : Anciennement on utilisait `mc admin user svcacct add` mais cette fa√ßon de faire est d√©sormais d√©pr√©ci√©e.

‚ö†Ô∏è le service account sera cr√©√© avec vos droits actuels, si vous souhaitez une gestion plus fine (acc√®s sur un certain dossier, en lecture seulement...), il vous sera possible de d√©finir une policy (fichier JSON qui d√©clare qui peut agir, sur quoi on peut agir et quelles actions sont effectuables). Pour les plus curieux, [nous renverrons √† la documentation de minio](https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-policy-create.html)

Ainsi, si vous √©crivez un script ou un service qui acc√®de souvent √† S3, utilisez un service account avec des cl√©s g√©r√©es proprement (seulement les droits n√©cessaires, stock√©es de fa√ßon s√©curis√©e...). En revanche, si vous voulez acc√©der √† s3 de fa√ßon int√©ractive, utilisez des cl√©s temporaires avec un session token.


# Duckdb ü¶Ü

## Installation

Pour instaler duckdb, il n'y a rien de plus simple que se rendre sur [leur site documentaire](https://duckdb.org/docs/installation/?version=stable&environment=cli&platform=linux&download_method=direct&architecture=x86_64) et s√©lectionner notre cas d'usage : en l'occurence en ligne de commande.

## Configuration 

Pour configurer la cli vous avez la possibilit√© de cr√©er un fichier `.duckdbrc` √† la racine de votre r√©pertoire personnel ($HOME). Ce fichier vous permettra d'ex√©cuter du code au lancement de votre session duckdb.

```
.prompt 'duckdb>'
CREATE OR REPLACE SECRET secret ( TYPE s3, PROVIDER credential_chain, CHAIN "env;config", PROFILE 'default',  ENDPOINT "minio.lab.sspcloud.fr" );
```

## Premi√®re utilisation

in memory avec un fichier local 

Tips 
.once 
.timer on 


Lire un fichier parquet 
parquet c'est quoi ? 

Blob syntax pour lire plusieurs fichiers 
des requ√™tes : filtre sur des colonnes -> c'est rapide




::: {.cell .markdown}

<details>
<summary>Afficher la solution</summary>

Une solution

</details>

:::
